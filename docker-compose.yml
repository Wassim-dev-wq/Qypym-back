version: '3.8'

services:
  # Core Infrastructure Services
  config-server:
    build: ./config-server
    container_name: fivy-config-server
    ports:
      - "8888:8888"
    networks:
      - fivy-network
    volumes:
      - ~/.ssh:/root/.ssh
    environment:
      - GIT_PRIVATE_KEY=${GIT_PRIVATE_KEY}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M

  service-discovery:
    build: ./service-discovery
    container_name: fivy-discovery
    ports:
      - "8761:8761"
    networks:
      - fivy-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M

  api-gateway:
    build: ./api-gateway
    container_name: fivy-gateway
    ports:
      - "8080:8080"
    networks:
      - fivy-network
    depends_on:
      config-server:
        condition: service_healthy
      service-discovery:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      SPRING_CONFIG_IMPORT: optional:configserver:http://fivy-config-server:8888
      SPRING_CLOUD_CONFIG_FAIL_FAST: "true"
      KEYCLOAK_SERVER_URL: http://fivy-keycloak:8180
      KEYCLOAK_REALM: ${KC_REALM}
      KEYCLOAK_CLIENT_ID: ${KC_CLIENT_ID}
      KEYCLOAK_CLIENT_SECRET: ${KC_CLIENT_SECRET}
    deploy:
      resources:
        limits:
          memory: 768M
    restart: unless-stopped

  # Authentication Services
  keycloak:
    build: ./keycloak-service
    container_name: fivy-keycloak
    environment:
      # Database
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://fivy-keycloak-db:5432/${KC_DB_NAME}
      KC_DB_USERNAME: ${KC_DB_USERNAME}
      KC_DB_PASSWORD: ${KC_DB_PASSWORD}

      KEYCLOAK_ADMIN: ${KC_ADMIN_USER}
      KEYCLOAK_ADMIN_PASSWORD: ${KC_ADMIN_PASSWORD}
      KC_BOOTSTRAP_ADMIN_USER: ${KC_ADMIN_USER}
      KC_BOOTSTRAP_ADMIN_PASSWORD: ${KC_ADMIN_PASSWORD}

      # Server Configuration
      KC_HTTP_PORT: 8180
      KC_HTTP_ENABLED: "true"
      KC_HOSTNAME: ${KC_HOSTNAME}
      KC_HOSTNAME_STRICT: "false"
      KC_PROXY: edge

      # Features
      KC_METRICS_ENABLED: "true"
      KC_HEALTH_ENABLED: "true"

      # JVM Settings
      JAVA_OPTS_APPEND: "-XX:MaxRAMPercentage=75 -XX:+UseG1GC"
    depends_on:
      keycloak-db:
        condition: service_healthy
    ports:
      - "8180:8180"
    networks:
      - fivy-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8180/auth/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  auth-service:
    build: ./auth-service
    container_name: fivy-auth-service
    depends_on:
      keycloak:
        condition: service_started
    environment:
      SERVER_PORT: ${AUTH_SERVICE_PORT}
      KEYCLOAK_REALM: ${KC_REALM}
      KEYCLOAK_AUTH_SERVER_URL: ${KC_AUTH_URL}
      KEYCLOAK_RESOURCE: ${KC_CLIENT_ID}
      KEYCLOAK_CREDENTIALS_SECRET: ${KC_CLIENT_SECRET}
      JAVA_TOOL_OPTIONS: -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005
    ports:
      - "${AUTH_SERVICE_PORT}:${AUTH_SERVICE_PORT}"
      - "${AUTH_SERVICE_DEBUG_PORT}:5005"
    networks:
      - fivy-network
    deploy:
      resources:
        limits:
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${AUTH_SERVICE_PORT}/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Application Services
  user-service:
    build: ./user-service
    container_name: fivy-user-service
    ports:
      - "9090:9090"
      - "${DEBUG_PORT}:5005"
    networks:
      - fivy-network
    depends_on:
      user-service-db:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      POSTGRES_DB: ${USER_DB_NAME}
      POSTGRES_USER: ${USER_DB_USERNAME}
      POSTGRES_PASSWORD: ${USER_DB_PASSWORD}
      JAVA_TOOL_OPTIONS: -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005
    deploy:
      resources:
        limits:
          memory: 768M
    restart: unless-stopped

  match-service:
    build: ./match-service
    container_name: fivy-match-service
    ports:
      - "9091:9091"
      - "5006:5005" # Debug port
    networks:
      - fivy-network
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      POSTGRES_DB: ${MATCH_DB_NAME}
      POSTGRES_USER: ${MATCH_DB_USERNAME}
      POSTGRES_PASSWORD: ${MATCH_DB_PASSWORD}
      JAVA_TOOL_OPTIONS: -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005
    deploy:
      resources:
        limits:
          memory: 768M
    restart: unless-stopped

  # Databases
  user-service-db:
    image: postgres:17-alpine
    container_name: fivy-user-db
    ports:
      - "${USER_DB_PORT}:5432"
    environment:
      POSTGRES_DB: ${USER_DB_NAME}
      POSTGRES_USER: ${USER_DB_USERNAME}
      POSTGRES_PASSWORD: ${USER_DB_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
    volumes:
      - user_service_data:/var/lib/postgresql/data
    networks:
      - fivy-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${USER_DB_USERNAME} -d ${USER_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
    restart: unless-stopped

  match-service-db:
    image: postgres:17-alpine
    container_name: fivy-match-db
    ports:
      - "${MATCH_DB_PORT}:5432"
    environment:
      POSTGRES_DB: ${MATCH_DB_NAME}
      POSTGRES_USER: ${MATCH_DB_USERNAME}
      POSTGRES_PASSWORD: ${MATCH_DB_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
    volumes:
      - match_service_data:/var/lib/postgresql/data
    networks:
      - fivy-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${MATCH_DB_USERNAME} -d ${MATCH_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
    restart: unless-stopped

  keycloak-db:
    image: postgres:17-alpine
    container_name: fivy-keycloak-db
    ports:
      - "${KC_DB_PORT}:5432"
    environment:
      POSTGRES_DB: ${KC_DB_NAME}
      POSTGRES_USER: ${KC_DB_USERNAME}
      POSTGRES_PASSWORD: ${KC_DB_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
    volumes:
      - keycloak_db_data:/var/lib/postgresql/data
    networks:
      - fivy-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${KC_DB_USERNAME} -d ${KC_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
    restart: unless-stopped

  # Cache & Message Brokers
  redis:
    image: redis:7-alpine
    container_name: fivy-redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - fivy-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 256M
    restart: unless-stopped

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: fivy-redis-commander
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379:0:${REDIS_PASSWORD}
    networks:
      - fivy-network
    depends_on:
      - redis
    deploy:
      resources:
        limits:
          memory: 256M
    restart: unless-stopped

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: fivy-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - fivy-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: fivy-kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "fivy-zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://fivy-kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - fivy-network
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 1G
    restart: unless-stopped

  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    container_name: fivy-kafdrop
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "fivy-kafka:29092"
      JVM_OPTS: "-Xms32M -Xmx64M"
      SERVER_SERVLET_CONTEXTPATH: "/"
    networks:
      - fivy-network
    depends_on:
      - kafka
    deploy:
      resources:
        limits:
          memory: 256M
    restart: unless-stopped

  # Monitoring Tools
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: fivy-pgadmin
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
    networks:
      - fivy-network
    deploy:
      resources:
        limits:
          memory: 256M
    restart: unless-stopped

networks:
  fivy-network:
    name: fivy-network
    driver: bridge

volumes:
  user_service_data:
  match_service_data:
  keycloak_data:
  keycloak_db_data:
  kafka_data:
  redis_data:
spring.application.name=notification-service
server.port=${NOTIF_SERVICE_PORT}

firebase.service.account.path=${FIREBASE_SERVICE_ACCOUNT_PATH}
firebase.project.id=${FIREBASE_PROJECT_ID}

spring.datasource.url=jdbc:postgresql://${NOTIF_DB_HOST}:${NOTIF_DB_PORT}/${NOTIF_POSTGRES_DB}
spring.datasource.username=${POSTGRES_USER}
spring.datasource.password=${POSTGRES_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver

spring.datasource.hikari.maximum-pool-size=5
spring.datasource.hikari.minimum-idle=1
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.idle-timeout=300000
spring.datasource.hikari.max-lifetime=1200000
spring.datasource.hikari.initialization-fail-timeout=60000
spring.datasource.hikari.connection-test-query=SELECT 1
spring.datasource.hikari.validation-timeout=5000
spring.datasource.hikari.pool-name=UserServiceHikariPool

spring.mail.host=${NOTIF_MAIL_HOST}
spring.mail.port=${NOTIF_MAIL_PORT}
spring.mail.username=${NOTIF_MAIL_USERNAME}
spring.mail.password=${NOTIF_MAIL_PASSWORD}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.default-encoding=UTF-8

spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

eureka.client.serviceUrl.defaultZone=${SERVICE_REGISTRY_DEFAULTZONE:http://srv-registry-${ENV:dev}:${SERVICE_REGISTRY_CONTAINER_PORT:8761}/eureka}
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true
eureka.instance.health-check-url-path=/actuator/health

management.endpoints.web.exposure.include=health,info,metrics,gateway
management.endpoint.health.show-details=always
management.endpoint.health.probes.enabled=true
management.health.livenessstate.enabled=true
management.health.readinessstate.enabled=true

spring.kafka.bootstrap-servers=${SPRING_KAFKA_BOOTSTRAP_SERVERS:mq-kafka-dev:29092}
spring.kafka.consumer.group-id=${SPRING_KAFKA_CONSUMER_GROUP_ID:notification-service}
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages=*
spring.kafka.consumer.properties.spring.json.type.mapping=notification:org.fivy.notificationservice.domain.event.PushNotification, email:org.fivy.notificationservice.domain.event.EmailNotification
spring.kafka.consumer.properties.spring.json.value.default.type=org.fivy.notificationservice.domain.event.PushNotification
expo.push.url=https://exp.host/--/api/v2/push/send
expo.push.timeout=5000
rest.template.connectTimeout=5000
rest.template.readTimeout=5000

spring.data.redis.host=${REDIS_HOST}
spring.data.redis.port=${REDIS_HOST_PORT}
spring.data.redis.password=${REDIS_PASSWORD:}
spring.data.redis.timeout=5000
spring.data.redis.database=0

keycloak.client-id=${KEYCLOAK_CLIENT_ID}
spring.security.oauth2.resourceserver.jwt.issuer-uri=${SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI}
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK_SET_URI}
keycloak.auth-server-url=${KEYCLOAK_AUTH_SERVER_URL}

logging.level.org.fivy.notificationservice=DEBUG
